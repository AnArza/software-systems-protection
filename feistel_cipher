#include <iostream>
#include <vector>

uint32_t roundFunction(uint32_t half, uint64_t key) {
    return half ^ static_cast<uint32_t>(key);
}

std::vector<uint64_t> generateRoundKeys(uint64_t mainKey, int rounds) {
    std::vector<uint64_t> roundKeys;
    for (int i = 0; i < rounds; ++i) {
        roundKeys.push_back(mainKey + i);
    }
    return roundKeys;
}

uint64_t encrypt(uint64_t data, const std::vector<uint64_t>& roundKeys) {
    uint32_t left = data >> 32;
    uint32_t right = data & 0xFFFFFFFF;

    for (size_t round = 0; round < roundKeys.size(); ++round) {
        uint32_t newLeft = right;
        right = left ^ roundFunction(right, roundKeys[round]);
        left = newLeft;
    }

    return (uint64_t(left) << 32) | right;
}

uint64_t decrypt(uint64_t data, const std::vector<uint64_t>& roundKeys) {
    uint32_t left = data >> 32;
    uint32_t right = data & 0xFFFFFFFF;

    for (int round = roundKeys.size() - 1; round >= 0; --round) {
        uint32_t newRight = left;
        left = right ^ roundFunction(left, roundKeys[round]);
        right = newRight;
    }

    return (uint64_t(left) << 32) | right;
}

int main() {
    uint64_t key = 12345678;
    uint64_t plaintext = 0x123456789ABCDEF0; 

    auto roundKeys = generateRoundKeys(key, 16);
    uint64_t ciphertext = encrypt(plaintext, roundKeys);
    uint64_t decrypted = decrypt(ciphertext, roundKeys);

    std::cout << "Original: " << std::hex << plaintext << std::endl;
    std::cout << "Encrypted: " << std::hex << ciphertext << std::endl;
    std::cout << "Decrypted: " << std::hex << decrypted << std::endl;

    return 0;
}
